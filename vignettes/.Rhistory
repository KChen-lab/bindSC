tolerance = 0.01, save = TRUE)
norm(Z0)
Z0
class(Z0)
out <- runDCCA(X=X[1:200,1:300], Z0=Z0[1:200,1:400], Y=Y[1:500,1:400],
num.D = 5, num.E = 5,
num.iteration = 100,
output = "./tp",
tolerance = 0.01, save = TRUE)
source("/home/jdou1/project/integraModel/dev_5/src/DCCA/R/generics.R")
source("/home/jdou1/project/integraModel/dev_5/src/DCCA/R/preProcessing.R")
source("/home/jdou1/project/integraModel/dev_5/src/DCCA/R/DCCA.R")
out <- runDCCA(X=X[1:200,1:300], Z0=Z0[1:200,1:400], Y=Y[1:500,1:400],
num.D = 5, num.E = 5,
num.iteration = 100,
output = "./tp",
tolerance = 0.01, save = TRUE)
out$cell_u
out$cell_u[1,]
out$cell_u[1,]^2
sum(out$cell_u[1,]^2)
old <- out
library(bigstatsr)
obj.svd <- big_randomSVD(X, fun.scaling = big_scale(),
k = 10, ncores = NCORES)
obj.svd <- big_randomSVD(X, fun.scaling = big_scale(),
k = 10, ncores = 10)
obj.svd <- big_randomSVD(X, fun.scaling = big_scale(),
k = 10, ncores = 1)
?big_randomSVD
X1<-as_FBM(X)
X1<-as_FBM(as.matrix(X))
class(X1)
obj.svd <- big_randomSVD(X1, fun.scaling = big_scale(),
k = 10, ncores = 1)
plot(obj.svd)
X<-as.matrix(X)
a<-irlba(crossprod(x = X, y = X), 200, fastpath = FALSE)
a<-irlba(crossprod(x = X[1:100,1:100], y = X[1:100,1:100]), 20, fastpath = FALSE)
plot(a$d)
tp <- crossprod(x = X[1:100,1:100], y = X[1:100,1:100])
tp <- as_FBM(tp)
obj.svd <- big_randomSVD(tp, fun.scaling = big_scale(),
k = 20, ncores = 1)
obj.svd
obj.svd$d
plot(a$d)
a$u[,1]
obj.sv$u[,1]
obj.svd$u[,1]
plot(obj.svd$u[,1] , a$u[,1])
obj.svd <- big_randomSVD(X1, fun.scaling = big_scale(),
k = 10, ncores = 1)
?big_randomSVD
obj.svd$center
obj.svd$scale
obj.svd <- big_randomSVD(X1, fun.scaling = big_scale(center = FALSE, scale=FALSE),
k = 10, ncores = 1)
plot(obj.svd$u[,1] , a$u[,1])
obj.svd <- big_randomSVD(X1, fun.scaling = big_scale(center = FALSE, scale=FALSE),
k = 20, ncores = 1)
plot(obj.svd$u[,1] , a$u[,1])
dim(a$u)
dim(obj.svd$u)
obj.svd <- big_randomSVD(tp, fun.scaling = big_scale(center=FALSE, scale=FALSE),
k = 20, ncores = 1)
plot(obj.svd$u[,1] , a$u[,1])
?big_randomSVD
NCORES <- nb_cores()
NCORES
source("/home/jdou1/project/integraModel/dev_5/src/DCCA/R/generics.R")
source("/home/jdou1/project/integraModel/dev_5/src/DCCA/R/preProcessing.R")
source("/home/jdou1/project/integraModel/dev_5/src/DCCA/R/DCCA.R")
source("/home/jdou1/project/integraModel/dev_5/src/DCCA/R/generics.R")
source("/home/jdou1/project/integraModel/dev_5/src/DCCA/R/preProcessing.R")
source("/home/jdou1/project/integraModel/dev_5/src/DCCA/R/DCCA.R")
out <- runDCCA(X=X[1:200,1:300], Z0=Z0[1:200,1:400], Y=Y[1:500,1:400],
num.D = 5, num.E = 5,
num.iteration = 100,
output = "./tp",
tolerance = 0.01, save = TRUE)
source("/home/jdou1/project/integraModel/dev_5/src/DCCA/R/generics.R")
source("/home/jdou1/project/integraModel/dev_5/src/DCCA/R/preProcessing.R")
source("/home/jdou1/project/integraModel/dev_5/src/DCCA/R/DCCA.R")
out <- runDCCA(X=X[1:200,1:300], Z0=Z0[1:200,1:400], Y=Y[1:500,1:400],
num.D = 5, num.E = 5,
num.iteration = 100,
output = "./tp",
tolerance = 0.01, save = TRUE)
?assert_cores
assert_cores(2)
getOption("bigstatsr.ncores.max")
options(bigstatsr.check.parallel.blas = FALSE)
out <- runDCCA(X=X[1:200,1:300], Z0=Z0[1:200,1:400], Y=Y[1:500,1:400],
num.D = 5, num.E = 5,
num.iteration = 100,
output = "./tp",
tolerance = 0.01, save = TRUE)
?big_copy
out <- runDCCA(X=X[1:200,1:300], Z0=Z0[1:200,1:400], Y=Y[1:500,1:400],
num.D = 5, num.E = 5,
num.iteration = 100,
output = "./tp",
tolerance = 0.01, save = TRUE)
source("/home/jdou1/project/integraModel/dev_5/src/DCCA/R/generics.R")
source("/home/jdou1/project/integraModel/dev_5/src/DCCA/R/preProcessing.R")
source("/home/jdou1/project/integraModel/dev_5/src/DCCA/R/DCCA.R")
out <- runDCCA(X=X[1:200,1:300], Z0=Z0[1:200,1:400], Y=Y[1:500,1:400],
num.D = 5, num.E = 5,
num.iteration = 100,
output = "./tp",
tolerance = 0.01, save = TRUE)
old <- out
source("/home/jdou1/project/integraModel/dev_5/src/DCCA/R/generics.R")
source("/home/jdou1/project/integraModel/dev_5/src/DCCA/R/preProcessing.R")
source("/home/jdou1/project/integraModel/dev_5/src/DCCA/R/DCCA.R")
out <- runDCCA(X=X[1:200,1:300], Z0=Z0[1:200,1:400], Y=Y[1:500,1:400],
num.D = 5, num.E = 5,
num.iteration = 100,
output = "./tp",
tolerance = 0.01, save = TRUE, bigMemory = FALSE)
plot(out$cell_u[,1], old$cell_u[,1])
plot(out$cell_r[,1], old$cell_r[,1])
out <- runDCCA(X=X[1:200,1:300], Z0=Z0[1:200,1:400], Y=Y[1:500,1:400],
num.D = 5, num.E = 5,
num.iteration = 100,
output = "./tp",
tolerance = 0.01, save = TRUE, bigMemory = TRUE)
out <- runDCCA(X=X, Z0=Z0, Y=Y,
num.D = 5, num.E = 5,
num.iteration = 100,
output = "./tp",
tolerance = 0.01, save = TRUE, bigMemory = TRUE)
source("/home/jdou1/project/integraModel/dev_5/src/DCCA/R/generics.R")
source("/home/jdou1/project/integraModel/dev_5/src/DCCA/R/preProcessing.R")
source("/home/jdou1/project/integraModel/dev_5/src/DCCA/R/DCCA.R")
out <- runDCCA(X=X, Z0=Z0, Y=Y,
num.D = 5, num.E = 5,
num.iteration = 100,
output = "./tp",
tolerance = 0.01, save = TRUE, bigMemory = TRUE)
ls()
object.size(X1)
object.size(Z0)
#library("DCCA")
library("splatter")
library("scater")
library("ggplot2")
A549 <- readRDS("../inst/A549/A549_QC.rds")
summary(A549)
library(ggplot2)
p1<-ggscatter(A549$RNA_meta, x = "UMAP1", y = "UMAP2",
color = "cell_type", palette = c("darkseagreen4","lightpink","darkorchid1"),
repel = FALSE,size=0.5, alpha=0.5,legend.title = "", title="scRNA-seq", font.title=16)
library("ggpubr")
library(ggplot2)
p1<-ggscatter(A549$RNA_meta, x = "UMAP1", y = "UMAP2",
color = "cell_type", palette = c("darkseagreen4","lightpink","darkorchid1"),
repel = FALSE,size=0.5, alpha=0.5,legend.title = "", title="scRNA-seq", font.title=16)
p2<-ggscatter(A549$ATAC_meta, x = "UMAP1", y = "UMAP2",
color = "group", palette = c("darkseagreen4","lightpink","darkorchid1"),
repel = FALSE,size=0.5, alpha=0.5,legend.title = "", title="scATAC-seq", font.title=16)
p1<-p1+rremove("axis") + rremove("ticks") + rremove("xylab")+ rremove("axis.text")
p2<-p2+rremove("axis") + rremove("ticks") + rremove("xylab")+ rremove("axis.text")
p<-ggarrange(p1, p2, nrow = 1, common.legend = TRUE, legend = "right")
p
X <- A549$RNA
Y <- A549$ATAC
Z0 <- A549$ACTIVITY
dim(X)
dim(Y)
dim(Z0)
gene.overlap <- intersect(rownames(X), rownames(Z0))
cell.overlap <- intersect(colnames(Y), colnames(Z0))
X <- X[gene.overlap,]
Z0 <- Z0[gene.overlap, cell.overlap]
Y <- Y[,cell.overlap]
source("/home/jdou1/project/integraModel/dev_5/src/DCCA/R/generics.R")
source("/home/jdou1/project/integraModel/dev_5/src/DCCA/R/preProcessing.R")
source("/home/jdou1/project/integraModel/dev_5/src/DCCA/R/DCCA.R")
object.size(Y)
out <- runDCCA(X=X, Z0=Z0, Y=Y,
num.D = 5, num.E = 5,
num.iteration = 100,
output = "./tp",
tolerance = 0.01, save = TRUE, bigMemory = TRUE)
library(bigstatsr)
out <- runDCCA(X=X, Z0=Z0, Y=Y,
num.D = 5, num.E = 5,
num.iteration = 100,
output = "./tp",
tolerance = 0.01, save = TRUE, bigMemory = TRUE)
source("/home/jdou1/project/integraModel/dev_5/src/DCCA/R/generics.R")
source("/home/jdou1/project/integraModel/dev_5/src/DCCA/R/preProcessing.R")
source("/home/jdou1/project/integraModel/dev_5/src/DCCA/R/DCCA.R")
out <- runDCCA(X=X, Z0=Z0, Y=Y,
num.D = 5, num.E = 5,
num.iteration = 100,
output = "./tp",
tolerance = 0.01, save = TRUE, bigMemory = TRUE)
source("/home/jdou1/project/integraModel/dev_5/src/DCCA/R/generics.R")
source("/home/jdou1/project/integraModel/dev_5/src/DCCA/R/preProcessing.R")
source("/home/jdou1/project/integraModel/dev_5/src/DCCA/R/DCCA.R")
out <- runDCCA(X=X, Z0=Z0, Y=Y,
num.D = 5, num.E = 5,
num.iteration = 100,
output = "./tp",
tolerance = 0.01, save = TRUE, bigMemory = TRUE)
options(bigstatsr.check.parallel.blas = FALSE)
source("/home/jdou1/project/integraModel/dev_5/src/DCCA/R/generics.R")
source("/home/jdou1/project/integraModel/dev_5/src/DCCA/R/preProcessing.R")
source("/home/jdou1/project/integraModel/dev_5/src/DCCA/R/DCCA.R")
out <- runDCCA(X=X, Z0=Z0, Y=Y,
num.D = 5, num.E = 5,
num.iteration = 100,
output = "./tp",
tolerance = 0.01, save = TRUE, bigMemory = TRUE)
NCORES <- nb_cores()
NCORES
source("/home/jdou1/project/integraModel/dev_5/src/DCCA/R/generics.R")
source("/home/jdou1/project/integraModel/dev_5/src/DCCA/R/preProcessing.R")
source("/home/jdou1/project/integraModel/dev_5/src/DCCA/R/DCCA.R")
out <- runDCCA(X=X, Z0=Z0, Y=Y,
num.D = 5, num.E = 5,
num.iteration = 100,
output = "./tp",
tolerance = 0.01, save = TRUE, bigMemory = TRUE)
tp <- crossprod(x = X, y = X)
dim(tp)
tp <- as_FBM(as.matrix(tp))
class(tp)
tp
object.size(tp)
tp
tp$ncol
tp$address
svd <- big_randomSVD(tp, fun.scaling = big_scale(center=FALSE, scale=FALSE), k =20m ncores = 6)
svd <- big_randomSVD(tp, fun.scaling = big_scale(center=FALSE, scale=FALSE), k =20, ncores = 6)
big_randomSVD()
big_randomSVD
gc(verbose=T)
svd <- big_randomSVD(tp, fun.scaling = big_scale(center=FALSE, scale=FALSE), k =20, ncores = 6)
svd$u
source("/home/jdou1/project/integraModel/dev_5/src/DCCA/R/generics.R")
source("/home/jdou1/project/integraModel/dev_5/src/DCCA/R/preProcessing.R")
source("/home/jdou1/project/integraModel/dev_5/src/DCCA/R/DCCA.R")
out <- runDCCA(X=X[1:100,1:200], Z0=Z0[1:200,1:200], Y=Y[1:200,1:500],
num.D = 5, num.E = 5,
num.iteration = 100,
output = "./tp",
tolerance = 0.01, save = TRUE, bigMemory = TRUE)
out <- runDCCA(X=X[1:100,1:200], Z0=Z0[1:100,1:500], Y=Y[1:200,1:500],
num.D = 5, num.E = 5,
num.iteration = 100,
output = "./tp",
tolerance = 0.01, save = TRUE, bigMemory = TRUE)
library(progress)
out <- runDCCA(X=X[1:100,1:200], Z0=Z0[1:100,1:500], Y=Y[1:200,1:500],
num.D = 5, num.E = 5,
num.iteration = 100,
output = "./tp",
tolerance = 0.01, save = TRUE, bigMemory = TRUE)
library(DCCA)
library(bigstatsr)
library(progress)
library(irlba)
source("/home/jdou1/project/integraModel/dev_5/src/DCCA/R/generics.R")
source("/home/jdou1/project/integraModel/dev_5/src/DCCA/R/preProcessing.R")
source("/home/jdou1/project/integraModel/dev_5/src/DCCA/R/DCCA.R")
out <- runDCCA(X=X[1:100,1:200], Z0=Z0[1:100,1:500], Y=Y[1:200,1:500],
num.D = 5, num.E = 5,
num.iteration = 100,
output = "./tp",
tolerance = 0.01, save = TRUE, bigMemory = TRUE)
out <- runDCCA(X=X, Z0=Z0, Y=Y,
num.D = 5, num.E = 5,
num.iteration = 100,
output = "./tp",
tolerance = 0.01, save = TRUE, bigMemory = TRUE)
gc(verbose=T)
gc()
?gc
gc(TRUE)
free -m
svd
svd$d
svd$u
gc()
rm(list=ls())
gc()
library("DCCA")
library("ggpubr")
library("splatter")
library("scater")
library("ggplot2")
A549 <- readRDS("../inst/A549/A549_QC.rds")
summary(A549)
library(ggplot2)
p1<-ggscatter(A549$RNA_meta, x = "UMAP1", y = "UMAP2",
color = "cell_type", palette = c("darkseagreen4","lightpink","darkorchid1"),
repel = FALSE,size=0.5, alpha=0.5,legend.title = "", title="scRNA-seq", font.title=16)
p2<-ggscatter(A549$ATAC_meta, x = "UMAP1", y = "UMAP2",
color = "group", palette = c("darkseagreen4","lightpink","darkorchid1"),
repel = FALSE,size=0.5, alpha=0.5,legend.title = "", title="scATAC-seq", font.title=16)
p1<-p1+rremove("axis") + rremove("ticks") + rremove("xylab")+ rremove("axis.text")
p2<-p2+rremove("axis") + rremove("ticks") + rremove("xylab")+ rremove("axis.text")
p<-ggarrange(p1, p2, nrow = 1, common.legend = TRUE, legend = "right")
p
X <- A549$RNA
Y <- A549$ATAC
Z0 <- A549$ACTIVITY
dim(X)
dim(Y)
dim(Z0)
library(DCCA)
library(bigstatsr)
library(progress)
library(irlba)
gene.overlap <- intersect(rownames(X), rownames(Z0))
cell.overlap <- intersect(colnames(Y), colnames(Z0))
X <- X[gene.overlap,]
Z0 <- Z0[gene.overlap, cell.overlap]
Y <- Y[,cell.overlap]
source("/home/jdou1/project/integraModel/dev_5/src/DCCA/R/generics.R")
source("/home/jdou1/project/integraModel/dev_5/src/DCCA/R/preProcessing.R")
source("/home/jdou1/project/integraModel/dev_5/src/DCCA/R/DCCA.R")
XX_SVD <- irlba_bigMemory(X, X, M)
gc()
tp <- crossprod_e(x = X, y = Y)
gc()
tp <- crossprod_e(x = X, y = X)
tp <- as_FBM(as.matrix(tp))
SVD <- big_randomSVD(tp, fun.scaling = big_scale(center=FALSE, scale=FALSE), k = 5, ncores = 6)
options(bigstatsr.check.parallel.blas = FALSE)
SVD <- big_randomSVD(tp, fun.scaling = big_scale(center=FALSE, scale=FALSE), k = 5, ncores = 6)
dim(SVD$u)
gc()
tp <- crossprod_e(x = t(Y), y = t(Y))
dim(Y)
Y[1:5,1:5]
object.size(Y)
gc()
gc(verbose = FALSE)
library(spam)
tp <- crossprod.spam(x = t(Y), y = t(Y))
object.size(tp)
tp[1:5,1:5]
plot(tp[1,])
plot(tp[2,])
tp <- as_FBM(as.matrix(tp))
gc()
SVD <- big_randomSVD(tp, fun.scaling = big_scale(center=FALSE, scale=FALSE), k = 5, ncores = 6)
gc()
source("/home/jdou1/project/integraModel/dev_5/src/DCCA/R/generics.R")
source("/home/jdou1/project/integraModel/dev_5/src/DCCA/R/preProcessing.R")
source("/home/jdou1/project/integraModel/dev_5/src/DCCA/R/DCCA.R")
out <- runDCCA(X=X, Z0=Z0, Y=Y,
num.D = 5, num.E = 5,
num.iteration = 100,
output = "./tp",
tolerance = 0.01, save = TRUE, bigMemory = TRUE)
Y[1,]
plot(Y[1,])
gc()
?as_FBM
1 <- big_attachExtdata()
X1 <- big_attachExtdata()
n <- nrow(X1)
m <- ncol(X1)
A <- matrix(0, m, 10);
A[] <- rnorm(length(A))
dim(X1)
dim(A)
X1
test <- big_prodMat(X, A)
test <- big_prodMat(X1, A)
test
dim(test)
?big_prodMat
test <- big_prodMat(Y, Y)
a <- as_FBM(as.matrix(Y))
test <- big_prodMat(a, a)
test <- big_prodMat(t(a), a)
a <- as_FBM(as.matrix(Y))
b <- as_FBM(as.matrix(t(Y)))
test <- big_prodMat(b, a)
dim(b)
dim(a)
test <- big_prodMat(a, b)
test <- big_prodMat(a,a)
dim(X1)
dim(A)
test <- big_prodMat(a,b)
classs(X1)
class(X1)
class(a)
test <- big_prodMat(a,b)
test <- big_prodMat(a,Y)
dim(Y)
N <- 24953
library(bigstatsr)
AB <- FBM(N, N, backingfile = "test")$save()
A<-Y
B<-Y
big_apply(AB, a.FUN = function(X, ind) {
X[, ind] <- t(A) %*% B[, ind]
NULL
}, block.size = 1e3)
dim(A)
dim(B)
A<-Y
B<-t(Y)
big_apply(AB, a.FUN = function(X, ind) {
X[, ind] <- A %*% B[, ind]
NULL
}, block.size = 1e3)
A<-as.matrix(Y)
B<-t(as.matrix(Y))
big_apply(AB, a.FUN = function(X, ind) {
X[, ind] <- A %*% B[, ind]
NULL
}, block.size = 1e3)
AB
gc()
gc
gc()
AB[1,1]
AB[1,2]
source("/home/jdou1/project/integraModel/dev_5/src/DCCA/R/generics.R")
source("/home/jdou1/project/integraModel/dev_5/src/DCCA/R/preProcessing.R")
source("/home/jdou1/project/integraModel/dev_5/src/DCCA/R/DCCA.R")
out <- runDCCA(X=X[1:300,1:300], Z0=Z0[1:300,1:400], Y=Y[1:100,1:400],
num.D = 5, num.E = 5,
num.iteration = 100,
output = "./tp",
tolerance = 0.01,
save = TRUE,
bigMemory = TRUE)
rm(test.bk)
getwd()
out <- runDCCA(X=X[1:300,1:300], Z0=Z0[1:300,1:400], Y=Y[1:100,1:400],
num.D = 5, num.E = 5,
num.iteration = 100,
output = "./tp",
tolerance = 0.01,
save = TRUE,
bigMemory = TRUE)
source("/home/jdou1/project/integraModel/dev_5/src/DCCA/R/generics.R")
source("/home/jdou1/project/integraModel/dev_5/src/DCCA/R/preProcessing.R")
source("/home/jdou1/project/integraModel/dev_5/src/DCCA/R/DCCA.R")
out <- runDCCA(X=X[1:300,1:300], Z0=Z0[1:300,1:400], Y=Y[1:100,1:400],
num.D = 5, num.E = 5,
num.iteration = 100,
output = "./tp",
tolerance = 0.01,
save = TRUE,
bigMemory = TRUE)
file.remove("test.bk")
source("/home/jdou1/project/integraModel/dev_5/src/DCCA/R/generics.R")
source("/home/jdou1/project/integraModel/dev_5/src/DCCA/R/preProcessing.R")
source("/home/jdou1/project/integraModel/dev_5/src/DCCA/R/DCCA.R")
out <- runDCCA(X=X[1:300,1:300], Z0=Z0[1:300,1:400], Y=Y[1:100,1:400],
num.D = 5, num.E = 5,
num.iteration = 100,
output = "./tp",
tolerance = 0.01,
save = TRUE,
bigMemory = TRUE)
print("Done")
source("/home/jdou1/project/integraModel/dev_5/src/DCCA/R/generics.R")
source("/home/jdou1/project/integraModel/dev_5/src/DCCA/R/preProcessing.R")
source("/home/jdou1/project/integraModel/dev_5/src/DCCA/R/DCCA.R")
out <- runDCCA(X=X[1:300,1:300], Z0=Z0[1:300,1:400], Y=Y[1:100,1:400],
num.D = 5, num.E = 5,
num.iteration = 100,
output = "./tp",
tolerance = 0.01,
save = TRUE,
bigMemory = TRUE)
out <- runDCCA(X=X[1:300,1:300], Z0=Z0[1:300,1:400], Y=Y[1:100,1:400],
num.D = 5, num.E = 5,
num.iteration = 100,
output = "./tp",
tolerance = 0.01,
save = TRUE,
bigMemory = TRUE)
out <- runDCCA(X=X[1:1000,1:1000], Z0=Z0[1:1000,1:1000], Y=Y[1:1000,1:1000],
num.D = 5, num.E = 5,
num.iteration = 100,
output = "./tp",
tolerance = 0.01,
save = TRUE,
bigMemory = TRUE)
source("/home/jdou1/project/integraModel/dev_5/src/DCCA/R/generics.R")
source("/home/jdou1/project/integraModel/dev_5/src/DCCA/R/preProcessing.R")
source("/home/jdou1/project/integraModel/dev_5/src/DCCA/R/DCCA.R")
out <- runDCCA(X=X[1:1000,1:1000], Z0=Z0[1:1000,1:1000], Y=Y[1:1000,1:1000],
num.D = 5, num.E = 5,
num.iteration = 100,
output = "./tp",
tolerance = 0.01,
save = TRUE,
bigMemory = TRUE)
out <- runDCCA(X=X[1:1000,1:1000], Z0=Z0[1:1000,1:1000], Y=Y[1:1000,1:1000],
num.D = 5, num.E = 5,
num.iteration = 100,
output = "./tp",
tolerance = 0.01,
save = TRUE,
bigMemory = TRUE)
outer()
out
